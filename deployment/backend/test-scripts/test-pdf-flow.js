const axios = require('axios');
const fs = require('fs');
const path = require('path');

const API_URL = 'http://localhost:5000/api';

async function testPDFFlow() {
  try {
    console.log('=== PDF Generation and Download Test ===\n');
    
    // Step 1: Create a test admin user or use existing one
    console.log('Step 1: Setting up test user...');
    const knex = require('knex');
    const knexConfig = require('./knexfile');
    const db = knex(knexConfig.development);
    const bcrypt = require('bcrypt');
    
    // Ensure test admin exists
    let testUser = await db('users').where('email', 'pdftest@test.com').first();
    if (!testUser) {
      const hashedPassword = await bcrypt.hash('test123', 10);
      const [userId] = await db('users').insert({
        email: 'pdftest@test.com',
        password_hash: hashedPassword,
        full_name: 'PDF Test Admin',
        role: 'admin',
        is_active: true,
        created_at: new Date(),
        updated_at: new Date()
      });
      testUser = { user_id: userId, email: 'pdftest@test.com' };
      console.log('✅ Created test user:', testUser.email);
    } else {
      console.log('✅ Using existing test user:', testUser.email);
    }
    
    // Step 2: Login
    console.log('\nStep 2: Logging in...');
    const loginResponse = await axios.post(`${API_URL}/auth/login`, {
      email: 'pdftest@test.com',
      password: 'test123'
    });
    
    const token = loginResponse.data.token;
    console.log('✅ Login successful');
    
    // Step 3: Get a student to generate report for
    console.log('\nStep 3: Getting student...');
    const studentsResponse = await axios.get(`${API_URL}/students`, {
      headers: { 'Authorization': `Bearer ${token}` },
      params: { limit: 1 }
    });
    
    if (studentsResponse.data.data.length === 0) {
      console.log('❌ No students found');
      await db.destroy();
      return;
    }
    
    const student = studentsResponse.data.data[0];
    console.log(`✅ Using student: ${student.name_korean || student.name} (ID: ${student.student_id})`);
    
    // Step 4: Generate PDF report
    console.log('\nStep 4: Generating PDF report...');
    const generateResponse = await axios.post(
      `${API_URL}/reports/generate`,
      {
        student_id: student.student_id,
        template_code: 'consultation_comprehensive',
        language: 'ko'
      },
      {
        headers: { 'Authorization': `Bearer ${token}` }
      }
    );
    
    const reportId = generateResponse.data.data.report_id;
    const pdfPath = generateResponse.data.data.pdf_path;
    console.log(`✅ PDF generated successfully!`);
    console.log(`   Report ID: ${reportId}`);
    console.log(`   PDF Path: ${pdfPath}`);
    
    // Step 5: Verify report in database
    console.log('\nStep 5: Verifying database...');
    const dbReport = await db('generated_reports')
      .where('report_id', reportId)
      .first();
    
    console.log(`✅ Database verification:`);
    console.log(`   Status: ${dbReport.status}`);
    console.log(`   File size: ${dbReport.file_size} bytes`);
    console.log(`   Generated by: User ${dbReport.generated_by}`);
    
    // Step 6: Download the PDF
    console.log('\nStep 6: Downloading PDF...');
    try {
      const downloadResponse = await axios.get(
        `${API_URL}/reports/${reportId}/download`,
        {
          headers: { 'Authorization': `Bearer ${token}` },
          responseType: 'arraybuffer'
        }
      );
      
      console.log(`✅ PDF downloaded successfully!`);
      console.log(`   Size: ${downloadResponse.data.length} bytes`);
      
      // Save to test file
      const testPdfPath = path.join(__dirname, `test_report_${reportId}.pdf`);
      fs.writeFileSync(testPdfPath, downloadResponse.data);
      console.log(`   Saved to: ${testPdfPath}`);
      
    } catch (downloadError) {
      console.log('❌ Download failed:', downloadError.response?.status);
      if (downloadError.response?.data) {
        const errorText = Buffer.from(downloadError.response.data).toString('utf-8');
        console.log('   Error:', errorText);
      }
    }
    
    // Cleanup
    await db.destroy();
    console.log('\n✅ Test complete!');
    
  } catch (error) {
    console.error('\n❌ Test failed:', error.response?.data || error.message);
    process.exit(1);
  }
}

testPDFFlow();